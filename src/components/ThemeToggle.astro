---
import { Sun, Moon } from "@lucide/astro";
---

{/* Theme Toggle Button */}
<button
  id="theme-toggle"
  class="relative w-14 h-8 bg-gradient-to-r cursor-pointer from-orange-400 to-yellow-400 dark:from-blue-600 dark:to-purple-600 rounded-full p-1 transition-all duration-300 shadow-lg hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
  aria-label="Toggle dark mode"
  aria-pressed="false"
  role="switch">
  {/* Background gradient overlay - Creates glow effect */}
  <div class="absolute inset-0 bg-gradient-to-r from-orange-400/20 to-yellow-400/20 dark:from-blue-400/20 dark:to-purple-400/20 rounded-full blur-lg" aria-hidden="true"></div>

  {/* Toggle circle - Slides left/right */}
  <div id="toggle-circle" class="relative w-6 h-6 bg-white dark:bg-slate-800 rounded-full shadow-lg transition-all duration-300 transform translate-x-0 flex items-center justify-center" aria-hidden="true">
    {/* Icons - Animated on theme change */}
    <Sun id="sun-icon" class="w-4 h-4 text-orange-500 absolute transition-all duration-300 opacity-100 rotate-0 scale-100" aria-hidden="true" />
    <Moon id="moon-icon" class="w-4 h-4 text-blue-400 absolute transition-all duration-300 opacity-0 -rotate-180 scale-0" aria-hidden="true" />
  </div>

  {/* Screen reader text - Announces current state */}
  <span id="theme-status" class="sr-only">Light mode active</span>
</button>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const themeToggle = document.getElementById("theme-toggle") as HTMLButtonElement;
    const toggleCircle = document.getElementById("toggle-circle");
    const sunIcon = document.getElementById("sun-icon");
    const moonIcon = document.getElementById("moon-icon");
    const themeStatus = document.getElementById("theme-status");

    let isDark = false;

    // Theme initialization - Check saved preference first, then system preference
    const savedTheme = localStorage.getItem("theme");
    const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;

    if (savedTheme) {
      isDark = savedTheme === "dark";
    } else {
      isDark = prefersDark;
    }

    // Apply theme to HTML root element and update UI
    document.documentElement.classList.toggle("dark", isDark);
    updateThemeUI(isDark);
    updateAriaAttributes(isDark);

    // Toggle theme function
    function toggleTheme() {
      isDark = !isDark;
      document.documentElement.classList.toggle("dark", isDark);
      localStorage.setItem("theme", isDark ? "dark" : "light");
      updateThemeUI(isDark);
      updateAriaAttributes(isDark);
    }

    // Update ARIA attributes and screen reader text
    function updateAriaAttributes(dark: boolean) {
      if (themeToggle) {
        themeToggle.setAttribute("aria-pressed", dark.toString());
        themeToggle.setAttribute("aria-label", dark ? "Switch to light mode" : "Switch to dark mode");
      }

      if (themeStatus) {
        themeStatus.textContent = dark ? "Dark mode active" : "Light mode active";
      }
    }

    // Update UI animations and positions based on theme
    function updateThemeUI(dark: boolean) {
      if (toggleCircle && sunIcon && moonIcon) {
        if (dark) {
          // Dark mode - slide circle right, show moon
          toggleCircle.classList.add("translate-x-6");
          toggleCircle.classList.remove("translate-x-0");

          // Icon transitions with rotation and scale effects
          sunIcon.classList.add("opacity-0", "rotate-180", "scale-0");
          sunIcon.classList.remove("opacity-100", "rotate-0", "scale-100");

          moonIcon.classList.add("opacity-100", "rotate-0", "scale-100");
          moonIcon.classList.remove("opacity-0", "-rotate-180", "scale-0");
        } else {
          // Light mode - slide circle left, show sun
          toggleCircle.classList.add("translate-x-0");
          toggleCircle.classList.remove("translate-x-6");

          sunIcon.classList.add("opacity-100", "rotate-0", "scale-100");
          sunIcon.classList.remove("opacity-0", "rotate-180", "scale-0");

          moonIcon.classList.add("opacity-0", "-rotate-180", "scale-0");
          moonIcon.classList.remove("opacity-100", "rotate-0", "scale-100");
        }
      }
    }

    // Add click event listener
    if (themeToggle) {
      themeToggle.addEventListener("click", toggleTheme);
    }

    // Add keyboard support (Enter and Space)
    if (themeToggle) {
      themeToggle.addEventListener("keydown", (e: Event) => {
        const keyEvent = e as KeyboardEvent;
        if (keyEvent.key === "Enter" || keyEvent.key === " ") {
          keyEvent.preventDefault();
          toggleTheme();
        }
      });
    }

    // Listen for system theme changes
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    mediaQuery.addEventListener("change", (e) => {
      // Only update if user hasn't manually set a preference
      if (!localStorage.getItem("theme")) {
        isDark = e.matches;
        document.documentElement.classList.toggle("dark", isDark);
        updateThemeUI(isDark);
        updateAriaAttributes(isDark);
      }
    });
  });
</script>
