---
// ThreeScene.astro - No props needed for this basic example
---

<div id="three-container"></div>

<script>
  import * as THREE from "three";
  import { Figure } from "./Figure";
  import { LightSource } from "./LightSource";
  import { EffectComposer, EffectPass, GodRaysEffect, RenderPass } from "postprocessing";

  // Initialize scene when component mounts
  function initScene() {
    // Canvas container
    const container = document.getElementById("three-container") as HTMLElement;

    // Scene setup
    const scene = new THREE.Scene();

    // Camera
    let camera = new THREE.PerspectiveCamera(60, container.clientWidth / container.clientHeight, 1, 1000);
    camera.position.set(5, 0, 20);

    // Renderer
    let renderer = new THREE.WebGLRenderer({
      powerPreference: "high-performance",
      antialias: false,
      stencil: false,
      depth: false,
    });
    renderer.setSize(container.clientWidth, container.clientHeight);
    container.appendChild(renderer.domElement);
    window.addEventListener("resize", onResize, false);

    // Create light
    let light = new LightSource();
    light.position.set(2, 0, -10);
    scene.add(light);

    // Create figure
    let figure = new Figure();
    scene.add(figure);

    // Create post-processing composter pipeline
    let composer = new EffectComposer(renderer);
    composer.addPass(new RenderPass(scene, camera));
    let gre = new GodRaysEffect(camera, light, {
      height: 480,
      kernelSize: 2,
      density: 1,
      decay: 0.9,
      weight: 0.5,
      exposure: 0.3,
      samples: 20,
      clampMax: 0.95,
    });
    composer.addPass(new EffectPass(camera, gre));

    let clock = new THREE.Clock();

    renderer.setAnimationLoop(() => {
      //renderer.render(scene, camera);
      let t = clock.getElapsedTime();
      light.userData.time.value = t;
      light.position.x = Math.cos(t) * 4;
      light.position.y = Math.sin(t * 0.6) * 4;
      composer.render();
    });

    // Handle window resize
    function onResize() {
      camera.aspect = container.clientWidth / container.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container.clientWidth, container.clientHeight);
    }

    // Clean up function
    return () => {
      container.removeEventListener("resize", onResize);
      container.removeChild(renderer.domElement);
    };
  }

  // Initialize the scene once the DOM is loaded
  document.addEventListener("DOMContentLoaded", initScene);
</script>

<style>
  #three-container {
    width: 100%;
    height: 100%;
    overflow: hidden;
  }
</style>
