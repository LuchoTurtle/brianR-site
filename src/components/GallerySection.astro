---
const events = [
  { id: 1, title: "Wedding at Grand Ballroom", category: "Wedding" },
  { id: 2, title: "Corporate Gala", category: "Corporate" },
  { id: 3, title: "Beach Wedding Ceremony", category: "Wedding" },
  { id: 4, title: "Birthday Celebration", category: "Private" },
  { id: 5, title: "Anniversary Party", category: "Private" },
  { id: 6, title: "Product Launch Event", category: "Corporate" },
];
---

<section id="gallery" class="py-20 px-6 bg-white dark:bg-gray-900">
  <div class="max-w-6xl mx-auto">
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6">Event Gallery</h2>
      <p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto leading-relaxed">
        Capturing the energy and atmosphere of unforgettable celebrations
      </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {
        events.map((event, index) => (
          <div
            class="group relative overflow-hidden rounded-3xl cursor-pointer transition-all duration-300 hover:scale-105 gallery-item"
            data-index={index}
          >
            <div class="relative bg-gray-100 dark:bg-gray-800 rounded-3xl overflow-hidden">
              <img
                src="/placeholder.svg"
                alt={event.title}
                class="w-full h-64 object-cover transition-transform duration-300 group-hover:scale-110"
              />

              <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div class="absolute bottom-6 left-6 right-6">
                  <h3 class="text-white font-semibold text-lg mb-2">{event.title}</h3>
                  <span class="inline-block px-4 py-2 bg-blue-600 text-white text-sm rounded-full">{event.category}</span>
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </div>

    <!-- Modal/Lightbox for selected image -->
    <div
      id="image-modal"
      class="fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4 opacity-0 pointer-events-none transition-opacity duration-300"
    >
      <div class="relative max-w-4xl max-h-full">
        <img id="modal-image" src="/placeholder.svg" alt="" class="max-w-full max-h-full object-contain rounded-2xl" />
        <button
          id="close-modal"
          class="absolute -top-4 -right-4 w-12 h-12 bg-red-600 text-white rounded-full hover:bg-red-700 transition-colors duration-300 flex items-center justify-center text-xl font-bold"
        >
          Ã—
        </button>
      </div>
    </div>
  </div>
</section>

<script>
  // Convert events data to be available in client-side script
  const events = [
    { id: 1, title: "Wedding at Grand Ballroom", category: "Wedding" },
    { id: 2, title: "Corporate Gala", category: "Corporate" },
    { id: 3, title: "Beach Wedding Ceremony", category: "Wedding" },
    { id: 4, title: "Birthday Celebration", category: "Private" },
    { id: 5, title: "Anniversary Party", category: "Private" },
    { id: 6, title: "Product Launch Event", category: "Corporate" },
  ];

  // Gallery functionality
  document.addEventListener("DOMContentLoaded", () => {
    const galleryItems = document.querySelectorAll(".gallery-item");
    const modal = document.getElementById("image-modal");
    const modalImage = document.getElementById("modal-image") as HTMLImageElement;
    const closeButton = document.getElementById("close-modal");

    if (modal && modalImage && closeButton) {
      // Open modal when gallery item is clicked
      galleryItems.forEach((item, index) => {
        item.addEventListener("click", () => {
          const event = events[index];
          modalImage.src = "/placeholder.svg";
          modalImage.alt = event.title;
          modal.classList.remove("opacity-0", "pointer-events-none");
          modal.classList.add("opacity-100");
          document.body.style.overflow = "hidden"; // Prevent scrolling
        });
      });

      // Close modal functions
      const closeModal = () => {
        modal.classList.add("opacity-0", "pointer-events-none");
        modal.classList.remove("opacity-100");
        document.body.style.overflow = "auto"; // Restore scrolling
      };

      // Close on button click
      closeButton.addEventListener("click", closeModal);

      // Close on backdrop click
      modal.addEventListener("click", (e) => {
        if (e.target === modal) {
          closeModal();
        }
      });

      // Close on escape key
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && !modal.classList.contains("opacity-0")) {
          closeModal();
        }
      });
    }
  });
</script>
